from importlib import resources
import os
import logging
import re
from multiprocessing import Condition
from aws_cdk import (
    CfnJson,
    Stack,
    aws_efs as efs,
    aws_ec2 as ec2,
    aws_iam as iam
)
from constructs import Construct

LOGLEVEL = os.environ.get('LOGLEVEL', 'WARNING').upper()
logging.basicConfig(level=LOGLEVEL)

class ClusterFileSystemStack(Stack):
    def __init__(self, scope: Construct, construct_id: str, my_cluster_stack, my_network_stack, **kwargs) -> None:
        super().__init__(scope, construct_id , **kwargs)

        self.worker_subnets = []

        for item in my_network_stack.kubernetes_vpc.select_subnets(subnet_group_name=my_network_stack.worker_subnets.name).subnets:
          self.worker_subnets.append(item)

        self.cluster_filesystem = efs.FileSystem(
            self,
            "ClusterFileSystem",
            vpc=my_cluster_stack.cluster.vpc,
            vpc_subnets=ec2.SubnetSelection(subnets=[*self.worker_subnets])
        )


        # EKS EFS CSI Driver: https://docs.aws.amazon.com/eks/latest/userguide/efs-csi.html
        # Annoyingly, the example provided uses a hardcoded name (and also misses the difference between "Driver_Policy" and "DriverRole")
        # We'll use the hardcoded name here for easier lookup, but the general best practice for working with the CDK is to not hardcode names and allow
        # them to be generated by the CDK itself.

        # 1. Create IAM Policy
        self.efs_csi_policy = iam.ManagedPolicy(
            self,
            "EfsCsiPolicy",
            statements=[
                iam.PolicyStatement(
                    actions=[
                        "elasticfilesystem:DescribeAccessPoints",
                        "elasticfilesystem:DescribeFileSystems"
                        ],
                    effect=iam.Effect.ALLOW,
                    resources=["*"]),
                iam.PolicyStatement(
                    actions=["elasticfilesystem:CreateAccessPoint"],
                    effect=iam.Effect.ALLOW,
                    conditions={"StringLike": {"aws:RequestTag/efs.csi.aws.com/cluster": "true"}},
                    resources=["*"]),
                iam.PolicyStatement(
                    actions=["elasticfilesystem:DeleteAccessPoint"],
                    effect=iam.Effect.ALLOW,
                    resources=["*"],
                    conditions={"StringLike": {"aws:RequestTag/efs.csi.aws.com/cluster": "true"}},
                )
            ],
            managed_policy_name="AmazonEKS_EFS_CSI_Driver_Policy"
        )

        # 2. Create IAM Role
        # The value for cluster.cluster_open_id_connect_issuer is considered a Token at synth time. Becasue JSON maps (including those used for IAM Policy Conditions) require strings, we need to use
        # CfnJson to represent this. See a more thorough explanation here: https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.core/README.html#cfnjson
        self.string_equals_key = CfnJson(self, "StringEqualsKey",
            value={
                f"{my_cluster_stack.cluster.cluster_open_id_connect_issuer}:sub": "system:serviceaccount:kube-system:efs-csi-controller-sa"
            }
        )

        self.efs_csi_role = iam.Role(
            self,
            "EfsCsiRole",
            assumed_by=iam.FederatedPrincipal(
                federated=f'arn:aws:iam::{os.environ.get("CDK_DEFAULT_ACCOUNT")}:oidc-provider/{my_cluster_stack.cluster.cluster_open_id_connect_issuer}',
                conditions=
                {
                    "StringEquals": self.string_equals_key
                }
            ),
            managed_policies=[self.efs_csi_policy],
            role_name="AmazonEKS_EFS_CSI_DriverRole"
        )
